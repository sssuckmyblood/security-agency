// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Security {
    id             Int         @id @default(autoincrement())
    FIO            String      @unique
    rank           Rank        @relation(fields: [rankId], references: [id])
    rankId         Int
    phone          String
    employmentDate DateTime
    timetable      Timetable[]
    incident       Incident[]
}

model Rank {
    id       Int        @id @default(autoincrement())
    rankName String     @unique
    hourCost Decimal    @db.Money
    security Security[]
}

model Object {
    id          Int                   @id @default(autoincrement())
    name        String                @unique
    address     String
    description String
    timetable   Timetable[]
    equipment   LinkEquipmentObject[]
    incident    Incident[]
}

model Timetable {
    id Int @id @default(autoincrement())

    security   Security @relation(fields: [securityId], references: [id])
    securityId Int

    object   Object @relation(fields: [objectId], references: [id])
    objectId Int

    startWorkDate DateTime
    endWorkDate   DateTime
    countHour     Int
}

model Equipment {
    id     Int                   @id @default(autoincrement())
    type   String                @unique
    object LinkEquipmentObject[]
}

model LinkEquipmentObject {
    id Int @id @default(autoincrement())

    object   Object @relation(fields: [objectId], references: [id])
    objectId Int

    equipment   Equipment @relation(fields: [equipmentId], references: [id])
    equipmentId Int

    placement String
    status    String
    checkData DateTime
}

model Incident {
    id          Int      @id @default(autoincrement())
    date        DateTime
    description String

    object   Object @relation(fields: [objectId], references: [id])
    objectId Int

    security   Security @relation(fields: [securityId], references: [id])
    securityId Int
}
